@startuml

class TelegramAdapter {
    __<<Properties>>__
    + Text: string
    + UserId: string
    + ChatId: string
    + FirstName: string
    + LastName: string
    + Date: DateTime 
    + PhoneNumber: string
    __<<Constructor>>__
    + TelegramAdapter(message: Message) 
}

class Buscador {
    __<<Properties>>__
    + Content: string
    - ContentBuilder: StringBuilder
    __<<Public Methods>>__
    + VerOfertasUbicacion(direccion: string): void
    + VerOfertasPalabrasClave(palabrasClave: string): void
    + VerOfertasTipo(tipo: string): void
}

class Datos << (S, SteelBlue) Singleton >> {
    __<<Properties>>__
    - listaAdmins: string[]
    - listaRubros: ArrayList
    - listaTipos: ArrayList
    - listaHabilitaciones: ArrayList
    - listaTokens: List<string>
    - listaOfertas: List<Oferta>
    - listaUsuarioEmpresa: List<UserEmpresa>
    - listaUsuarioEmprendedor: List<UserEmprendedor>
    __<<Public Methods>>__
    + LoadData() : void
    + GetOfertaById(userId: string, oferId: string) : Oferta
    + GetUserById(id: string) : IUser
    + RegistrarUsuarioEmpresa(user: UserEmpresa) : void
    + RegistrarUsuarioEmprendedor(user: UserEmprendedor) : void
    + AgregarToken(token: string) : void
    + EliminarToken(token: string) : void
    + IsOfferValid(userId: string, oferId: string) : bool
    + IsRegistered(id: string) : bool
    + IsAdmin(id: string) : bool 
    + IsTokenValid(token: string) : bool
    + CheckHabilitaciones(habilitacion: string) : bool
    + CheckTipos(tipoProducto: string) : bool
    + CheckRubros(rubro: string) : bool
    + UpdateOfersData() : void
    + UpdateTokensData() : void
    + UpdateEmpresasData() : void
    + UpdateEmprendedoresData() : void
    __<<Private Methods>>__
    - LoadTokensData() : void
    - LoadRegisteredEmpresas() : void
    - LoadRegisteredEmprendedores() : void
    - LoadPublications() : void
}

class Emprendedor{
    __<<Properties>>__
    - compras: ArrayList
    - especializaciones: ArrayList
    + Ubicacion: string
    + Rubro: Rubro
    + Habilitacion: Habilitaciones
    + Especializaciones: ArrayList
    + Compras: ArrayList
    __<<Constructor>>__
    + Emprendedor() <<JsonConstructor>>
    + Emprendedor(ubicacion: string, rubro: Rubro, Habilitacion: Habilitaciones)
    __<<Methods>>__
    + AgregarHabilitacion(habilitacion: string) : void
    + AgregarRubro(rubro: string) : void
    + AgregarEspecializacion(especializacion: string) : void
    + EliminarEspecializacion(especializacion: string) : void
    + ConsumoXTiempo(userEmprendedor: UserEmprendedor) : string
}

class Empresa {
    __<<Properties>>__
    + Nombre: string
    + Ubicacion: string
    + Rubro: Rubro
    + Especializaciones: ArrayList
    + Ofertas: List<Ofertas>
    __<<Constructor>>__
    + Empresa() <<JsonConstructor>>
    + Empresa(nombre: string, ubicacion: string, rubro: Rubro)
    __<<Methods>>__
    + AgregarRubro(rubro: string) : void
    + CrearEmpresa(nombre: string, ubicacion: string, rubro: string) : void
    + AgregarMsjClave(oferId: string, palabra: string) : void
    + AgregarEspecializacion(especializacion: string) : void
    + VerificarVentas(): Dictionary<string, int>
}

class Habilitaciones {
    __<<Properties>>__
    + Habilitaciones: string
    __<<Constructor>>__
    + Habilitaciones() <<JsonConstructor>>
    + Habilitaciones(habilitacion: string)
}

class IdGenerator {
    __<<Methods>>__
    {static}  + GenerateToken(): string
    {static}  + GenerateNumercId(): string
    {static} - generator(lengh: int, charString: string): string
}

class Oferta {
    __<<Properties>>__
    - palabrasClave: ArrayList
    - comprador: UserEmprendedor
    + Id: string
    + Nombre: string
    + Product: Producto
    + PalabrasClave: ArrayList <<JsonConstructor>>
    + HabilitacionesOferta: Habilitaciones
    + IsVendido: bool
    + isRecurrente: bool
    + Comprador: UserEmprendedor
    __<<Constructor>>__
    + Oferta() <<JsonConstructor>>
    + Oferta(nombre: string, product: Producto, isRecurrente: bool, habilitacionesOferta: Habilitaciones)
    __<<Methods>>__
    + AgregarMsjClave(palabra: string): void
}

class Producto {
    __<<Properties>>__
    + IsPesos: bool
    + Nombre: string
    + Descripcion: string
    + Ubicacion: string
    + Valor: int
    + Cantidad: int
    + Tipo: TipoProducto
    __<<Constructor>>__
    + Producto() <<JsonConstructor>>
    + Producto(nombre: string, descripcion: string, ubicacion: string, valor: int, isPesos: bool, cantidad: int, tipo: TipoProducto)
    __<<Methods>>__
    + MonetaryValue(): string
}

class Rubro {
    __<<Properties>>__
    + Rubros: string
    __<<Constructor>>__
    + Rubro() <<JsonConstructor>>
    + Rubro(rubro: string)
}

class Singleton << (S, SteelBlue) Singleton >> {
    __<<Properties>>__
    {static} - instance: Singleton
    __<<Methods>>__
    - Singleton()
    {static} + getInstance(): Singleton
}

class StatusManager  << (S, SteelBlue) Singleton >> {
    __<<Properties>>__
    - userData: Dictionary <string, string>
    __<<Methods>>__
    + ListaEstadoUsuario(): Dictionary <string, string>
    + AgregarEstadoUsuario(id: string, estado: string): void
    + PrintUserStatus(): void
    + CheckStatus(id: string): string
}

class Temp {
    __<<Properties>>__
    + TempData: Dictionary <string, Dictionary<string,string>>
    __<<Methods>>__
    + AddDataById(id: string, key: string, data: string): void
    + GetDataByKey(id: string, key: string): string
    + WipeDataById(id: string): void
}

class TipoProducto {
    __<<Properties>>__
    + Nombre: string
    __<<Constructor>>__
    + TipoProducto() <<JsonConstructor>>
    + TipoProducto(tipo: string)
}

class UserAdmin {
    __<<Properties>>__
    + Id: string
    + Nombre: string
    __<<Constructor>>__
    + UserAdmin(id: string, nombre: string)
    __<<Methods>>__
    {static} + InvitarEmpresa(): string
}

class UserCreator << (S, SteelBlue) Singleton >>{
    __<<Methods>>__
    + CrearUserAdmin(id: string): void
    + CrearUserEmpresa(id: string): void
    + CrearUserEmprendedor(id: string): void
}
 
class UserEmprendedor {
    __<<Properties>>__
    + Id: string
    + Nombre: string
    + Emprendedor: Emprendedor
    __<<Constructor>>__
    + UserEmprendedor() <<JsonConstructor>>
    + UserEmprendedor(id: string, nombre: string)
    __<<Methods>>__
    + AgregarHabilitacion(habilitacion: string): void
    + AgregarRubro(rubro: string): void
    + AgregarEspecializacion(especializacion: string): void
    + EliminarEspecializacion(especializacion: string): void
    + ConsumoXTiempo(): string
    + VerOfertasPalabrasClave(palabraClave: string): string
    + VerOfertasUbicacion(): string
    + VerOfertasTipo(tipo: string): string
}

class UserEmpresa {
    __<<Properties>>__
    + Id: string
    + Nombre: string
    + Empresa: Empresa
    + IsInvited: bool
    __<<Constructor>>__
    + UserEmpresa() <<JsonConstructor>>
    + UserEmpresa(id: string, nombre: string) <<Constructor>>
    __<<Methods>>__
    + AgregarRubro(rubro: string) : void
    + CrearEmpresa(nombre: string, ubicacion: string, rubro: string) : void
    + CrearMsjClave(oferId: string, palabra: string) : void
    + CrearOferta(datosOferta: string, datosHabilitacion: string, isRecurrente: string, nombreProducto: string, descripcionProducto: string, ubicacionProducto: string, valorProducto: int, valorMoneda: string, cantidadProducto: int, datosTipoProducto: string): void
    + CrearProducto(nombre: string, descripcion: string, ubicacion: string, valor: int, isPesos: bool, cantidad: int, datosTipoProducto: string): Producto
    + ConcretarOferta(input: string, nombreOferta: string): void
    + VerificarVentas(): Dictionary<string, int>
}


interface IMessage << Interface >> {
    __<<Properties>>__
    UserId: string
    ChatId: string
    Text: string
    FirstName: string
    LastName: string
    Date: DateTime
    PhoneNumber: string
}

interface IUser << Interface >> {
    __<<Properties>>__
    Id: string
}

interface IHandler << Interface >> {
    __<<Properties>>__
    Next: IHandler
    __<<Methods>>__
    Handle(message: IMessage, response: out string): IHandler
    Cancel(): void
}


class Distance{
    __<<Properties>>__
    + Found: bool
    + TravelDistance: double
    + TravelDuration: double
    }

class Location{
    __<<Properties>>__
    + Found: bool
    + AddresLine: string
    + CountryRegion: string
    + FormattedAddress: string
    + Locality: string
    + PostalCode: string
    + Latitude: double
    + Longitude: double
}


class LocationApi{
    __<<Properties>>__
    {static} - DistanceUrl: string
    {static} - Location: string
    {static} - MapUrl: string
    {static} - RouteUrl: string
    __<<Methods>>__
    + GetLocationAsync(address: string, city: string, department: string, country: string): async Task<Location>
    + GetLocation(address: string, city: string, department: string, country: string): Location
    + GetDistanceAsync(from: Location, to: Location): async Task<Distance>
    + GetDistance(from: Location, to: Location): Distance
    + GetDistanceAsync(from: string, to: string): async Task<Distance>
    + GetDistance(from: string, to: string): Distance
    + DownloadMapAsync(latitude: double, longitude: double, path: string, zoomLevel: int): async Task
    + DownloadMap(latitude: double, longitude: double, zoomLevel: int): void
    + DownloadRouteAsync(fromLatitude: double, fromLongitude: double, toLatitude: double, toLongitude: double, path: string): async Task
    + DownloadRoute(fromLatitude: double, fromLongitude: double, toLatitude: double, toLongitude: double, path: string): void
    + Dispose(): void
    # Dispose(disposing: bool): virtual void
    __<<Private Methods>>__
    {static} - GetUri(baseUrl: string, parameters: IDictionary<string, string>): Uri
}


UserEmpresa "1" o-- "1" Empresa : Empresa
UserEmpresa --o  Datos


@enduml 