<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Proyecto_Final.Buscador">
            <summary>
            
            </summary>
        </member>
        <member name="P:Proyecto_Final.Buscador.Content">
            <summary>
            La función de esta clase es en base a las ofertas guardadas, buscarlas en base a ciertos criterios.
            Debido a que la única responsabilidad de esta clase es buscar ofertas según distintos criterios, esta sigue el SRP.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto_Final.Buscador.ContentBuilder">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Proyecto_Final.Buscador.VerOfertasUbicacion(System.String)">
            <summary>
            /// En base a la ubicación del Emprendedor, retorna una lista con todas las ofertas que se encuentren a una distancia de 10km o menos; utilizando el LocationApi <see cref="T:Ucu.Poo.Locations.Client.LocationApiClient"/>.
            </summary>
            <param name="direccion"></param>
        </member>
        <member name="M:Proyecto_Final.Buscador.VerOfertasPalabraClave(System.String)">
            <summary>
            En base a una palabra clave recibida, otorga todas las ofertas que tengan la misma palabra clave
            </summary>
            <param name="palabraClave"></param>
            <returns></returns>
        </member>
        <member name="M:Proyecto_Final.Buscador.VerOfertasTipo(System.String)">
            <summary>
            En base a un tipo de producto recibido, otorga todas las ofertas que tengan el mismo tipo
            </summary>
            <param name="tipo"></param>
            <returns></returns>
        </member>
        <member name="T:Proyecto_Final.Datos">
            <summary>
            Esta clase tiene como función almacenar datos de distintas clases y revisar que los datos ingresados sean los permitidos por el programa.
            Se utilizan los patrones Expert y Singleton, ya que es necesario que exista una sola instancia de esta clase datos, 
            lo cual implica que la manera de retornar las listas es en base a un método de instancia. 
            Además, debido a que esta almacena las listas, es experta para modificar los datos existentes.
            </summary>
        </member>
        <member name="M:Proyecto_Final.Datos.GetData">
            <summary>
            Al inicializar el programa se obtienen todos los datos de la DB.
            </summary>
        </member>
        <member name="M:Proyecto_Final.Datos.GetOfertaById(System.String,System.String)">
            <summary>
            Busca las ofertas por ID y retorna la oferta.
            </summary>
            <param name="userId"></param>
            <param name="oferId"></param>
            <returns>Retorna una Oferta.</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.GetUserById(System.String)">
            <summary>
            Busca entre los usuarios registrados por id y retorna el usuario.
            </summary>
            <param name="id"></param>
            <returns>Retorna un IUser.</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.ListaUsuariosRegistrados">
            <summary>
            Lista de usuarios registrados mediante el handler "RegisterHandler"
            </summary>
            <returns>Lista con los usuarios registrados.</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.IsRegistered(System.String)">
            <summary>
            Verifica si la id ya esta registrada.
            </summary>
            <param name="id"></param>
            <returns>Devuelve true si la id esta registrada, false de lo contrario</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.ListaAdmins">
            <summary>
            Devuelve una lista con los ids de admins validos.
            </summary>
            <returns>Lista de ids de admins.</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.IsAdmin(System.String)">
            <summary>
            Verifica si es un admin.
            </summary>
            <param name="token"></param>
            <returns>Devuelve true sie es un admin, false de lo contrario.</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.ListaTokens">
            <summary>
            Devuelve la lista de tokens validos.
            </summary>
            <returns>Lista de tokens validos.</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.AgregarToken(System.String)">
            <summary>
            Agrega un token a la lista.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.EliminarToken(System.String)">
            <summary>
            Elimina un token de la lista.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.IsTokenValid(System.String)">
            <summary>
            Verifica si el token es valido.
            </summary>
            <param name="token"></param>
            <returns>Devuelve true si es valido, false de lo contrario.</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.ListaOfertas">
            <summary>
            Otorga una lista con todas las publicaciones realizadas.
            </summary>
            <returns>Lista con Oferta.</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.AgregarOferta(Proyecto_Final.Oferta)">
            <summary>
            Agrega una oferta a la lista de publicaciones.
            </summary>
            <param name="oferta"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.ListaUsuarioEmpresa">
            <summary>
            Otorga una lista con todos los UserEmpresa registrados en la aplicacion.
            </summary>
            <returns>Lista con UserEmpresa</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.AgregarUsuarioEmpresa(Proyecto_Final.UserEmpresa)">
            <summary>
            Agrega un UserEmpresa a la aplicacion.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.ListaUsuarioEmprendedor">
            <summary>
            Otorga una lista con todos los UserEmprendedor registrados.
            </summary>
            <returns>Lista con UserEmprendedor</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.AgregarUsuarioEmprendedor(Proyecto_Final.UserEmprendedor)">
            <summary>
            Agrega un UserEmprendedor a la aplicacion.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.ListaEmpresa">
            <summary>
            Lista con todas las Empresa registradas.
            </summary>
            <returns>Lista con Empresa</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.AgregarEmpresa(Proyecto_Final.Empresa)">
            <summary>
            Agrega una empresa a la aplicacion.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.ListaHabilitaciones">
            <summary>
             Otorga una lista de habilitaciones registradas por el programa <see cref="T:Proyecto_Final.Habilitaciones"/>.
             </summary>
             <returns>Retorna la lista "listaHabilitaciones" de la clase "Datos".</returns>  
        </member>
        <member name="M:Proyecto_Final.Datos.ListaTipos">
            <summary>
            Otorga una lista de tipos de producto (plástico, tela, etc...) registradas por el programa <see cref="T:Proyecto_Final.TipoProducto"/>.
            </summary>
            <returns>Retorna la lista "listaTipos" de la clase "Datos".</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.ListaRubros">
            <summary>
             Otorga una lista de rubros disponibles para asignarle a una empresa <see cref="T:Proyecto_Final.Rubro"/>.
             </summary>
             <returns>Retorna una lista "listaRubros" de la clase "Datos".</returns>//  
        </member>
        <member name="M:Proyecto_Final.Datos.AgregarHabilitacion(Proyecto_Final.Habilitaciones)">
            <summary>
            Agrega una habilitación a la lista de habilitaciones permitidas por el programa.
            </summary>
            <param name="habilitacion"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.EliminarHabilitacion(Proyecto_Final.Habilitaciones)">
            <summary>
            Elimina una habilitación de la lista de habilitaciones permitidas por el programa.
            </summary>
            <param name="habilitacion"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.AgregarRubro(Proyecto_Final.Rubro)">
            <summary>
            Agrega un rubro a la lista de rubros permitidos por el programa.
            </summary>
            <param name="rubro"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.EliminarRubro(Proyecto_Final.Rubro)">
            <summary>
            Elimina un rubro de la lista de rubros permitidos por el programa.
            </summary>
            <param name="rubro"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.AgregarTipo(Proyecto_Final.TipoProducto)">
            <summary>
            Agrega un tipo de producto a la lista de tipos de productos permitidos por el programa.
            </summary>
            <param name="tipo"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.EliminarTipo(Proyecto_Final.TipoProducto)">
            <summary>
            Elimina un tipo de producto de la lista de tipos de productos permitidos por el programa.
            </summary>
            <param name="tipo"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.EliminarOfertas(Proyecto_Final.Oferta)">
            <summary>
            Elimina una oferta de la lista de ofertas.
            </summary>
            <param name="oferta"></param>
        </member>
        <member name="M:Proyecto_Final.Datos.CheckHabilitaciones(System.String)">
            <summary>
            Revisa si la habilitación que el usuario quiere asignarse existe dentro de las habilitaciones permitidas por el programa.
            </summary>
            <param name="habilitacion"></param>
            <returns><c>true</c>Si la habilitación a agregar concuerda con las existentes en el programa,<c>false</c> en caso contrario.</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.CheckTipos(System.String)">
            <summary>
            Revisa si el tipo de producto que el usuario quiere asignar al producto existe dentro de los tipos de productos permitidos por el programa.
            </summary>
            <param name="tipoProducto"></param>
            <returns><c>true</c>Si el tipo de producto a agregar concuerda con los existentes en el programa,<c>false</c> en caso contrario.</returns>
        </member>
        <member name="M:Proyecto_Final.Datos.CheckRubros(System.String)">
            <summary>
            Revisa si el rubro que el usuario quiere asignar a una empresa existe dentro de los rubros permitidos por el programa.
            </summary>
            <param name="rubro"></param>
            <returns><c>true</c>Si el rubro a agregar concuerda con los existentes en el programa,<c>false</c> en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.Emprendedor">
            <summary>
            Esta clase representa los datos adicionales del emprendedor.
            Se utiliza el patrón Expert debido a que la clase contiene los datos personales del usuario Emprendedor, 
            y por ende es experta en la modificación de estos datos; además de ser experta en evaluar el consumo por tiempo del usuario emprendedor,
            ya que los datos de las compras realizadas se contienen en esta clase.
            </summary>
        </member>
        <member name="P:Proyecto_Final.Emprendedor.Ubicacion">
            <summary>
            Otorga la ubicación del Emprendedor
            </summary>
            <value>Ubicación del Emprendedor</value>
        </member>
        <member name="P:Proyecto_Final.Emprendedor.Rubro">
            <summary>
            Otorga una instancia de objeto "Rubro" del Emprendedor
            </summary>
            <value>Objeto de tipo "Rubro".</value>
        </member>
        <member name="P:Proyecto_Final.Emprendedor.Habilitacion">
            <summary>
            Otorga una instancia de objeto "Habilitaciones" del Emprendedor
            </summary>
            <value>Objeto de tipo "Habilitaciones".</value>
        </member>
        <member name="P:Proyecto_Final.Emprendedor.Especializaciones">
            <summary>
            Otorga una lista de strings que representan las especializaciones del Emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto_Final.Emprendedor.Compras">
            <summary>
            Otorga una lista de strings que representan las compras del Emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyecto_Final.Emprendedor.#ctor">
            <summary>
            Constructor vacio utilizado para la serializacion.
            </summary>
        </member>
        <member name="M:Proyecto_Final.Emprendedor.#ctor(System.String,Proyecto_Final.Rubro,Proyecto_Final.Habilitaciones)">
            <summary>
            Inicializa la clase Emprendedor
            </summary>
            <param name="ubicacion"></param>
            <param name="rubro"></param>
            <param name="habilitacion"></param>
        </member>
        <member name="M:Proyecto_Final.Emprendedor.AgregarHabilitacion(System.String)">
            <summary>
            Agrega una habilitacion.
            </summary>
            <param name="habilitacion"></param>
        </member>
        <member name="M:Proyecto_Final.Emprendedor.AgregarRubro(System.String)">
            <summary>
            Agrega un rubro.
            </summary>
            <param name="rubro"></param>
        </member>
        <member name="M:Proyecto_Final.Emprendedor.AgregarEspecializacion(System.String)">
            <summary>
            Agrega una Especialización al Emprendedor.
            </summary>
        </member>
        <member name="M:Proyecto_Final.Emprendedor.EliminarEspecializacion(System.String)">
            <summary>
            Elimina una Especialización al Emprendedor.
            </summary>
        </member>
        <member name="M:Proyecto_Final.Emprendedor.ConsumoXTiempo(Proyecto_Final.UserEmprendedor)">
            <summary>
            
            </summary>
            <summary>
            Como emprendedor, quiero saber cuántos materiales o residuos consumí en un período de tiempo, para de esa forma tener un control de mis insumos.
            </summary>
        </member>
        <member name="T:Proyecto_Final.Empresa">
            <summary>
            Esta clase representa a la Empresa.
            Se utiliza el patrón Expert debido a que la clase contiene los datos personales del usuario Empresa, 
            y por ende es experta en la modificación de estos datos; además de ser experta en evaluar las ventas del usuario Empresa, 
            ya que las ofertas personales se contienen en esta clase. 
            También se utiliza el patrón de Delegación para delegar la modificación de los atributos de una oferta a la clase que almacena esos atributos, 
            que es la clase "Oferta".
            </summary>
        </member>
        <member name="P:Proyecto_Final.Empresa.Nombre">
            <summary>
            Obtiene un valor del nombre de la Empresa.
            </summary>
            <value>Nombre de la empresa.</value>
        </member>
        <member name="P:Proyecto_Final.Empresa.Ubicacion">
            <summary>
            Obtiene un valor de la ubocacion de la Empresa.
            </summary>
            <value>Ubicacion de la empresa.</value>
        </member>
        <member name="P:Proyecto_Final.Empresa.Rubro">
            <summary>
            Obtiene un valor del Rubro de la empresa.
            </summary>
            <value>Objeto del tipo Rubro.</value>
        </member>
        <member name="P:Proyecto_Final.Empresa.Especializaciones">
            <summary>
            Obtiene un valor de las especializaciones de la empresa.
            </summary>
            <value>Lista de especializaciones.</value>
        </member>
        <member name="P:Proyecto_Final.Empresa.Ofertas">
            <summary>
            Obtiene un valor de las ofertaas publicadas de la empresa.
            </summary>
            <value>Lista con ofertas publicadas por la empresa.</value>
        </member>
        <member name="M:Proyecto_Final.Empresa.#ctor">
            <summary>
            Constructor vacio utilizado para la serializacion.
            </summary>
        </member>
        <member name="M:Proyecto_Final.Empresa.#ctor(System.String,System.String,Proyecto_Final.Rubro)">
            <summary>
            Inicializa la clase Empresa.
            </summary>
            <param name="nombre"></param>
            <param name="ubicacion"></param>
            <param name="rubro"></param>
        </member>
        <member name="M:Proyecto_Final.Empresa.AgregarRubro(System.String)">
            <summary>
            Agrega un rubro.
            </summary>
            <param name="rubro"></param>
        </member>
        <member name="M:Proyecto_Final.Empresa.AgregarMsjClave(System.ValueTuple{System.String,System.String})">
            <summary>
            Agrega una palabra clave a una publicacion determinada.
            </summary>
            <param name="datosMensaje"></param>
        </member>
        <member name="M:Proyecto_Final.Empresa.AgregarEspecializacion(System.String)">
            <summary>
            Agrega una especializacion a la empresa y la guarda en un array.
            </summary>
            <param name="especializacion"></param>
        </member>
        <member name="M:Proyecto_Final.Empresa.VerificarVentas">
            <summary>
            Como empresa, quiero saber todos los materiales o residuos entregados en un período de tiempo, para de esa forma tener un seguimiento de su reutilización.
            </summary>
            <returns>Retorna un diccionario con los datos de las ventas</returns>
        </member>
        <member name="T:Proyecto_Final.Habilitaciones">
            <summary>
            Esta clase representa las habilitaciones necesarias para la tenencia de productos.
            Esta clase tiene una única responsabilidad que es diferenciar entre lo que es una habilitacion y lo que no, por lo cual sigue el SRP.
            </summary>
        </member>
        <member name="P:Proyecto_Final.Habilitaciones.Habilitacion">
            <summary>
            Otorga el nombre de la Habilitación.
            </summary>
            <value>Nombre de la Habilitación.</value>
        </member>
        <member name="M:Proyecto_Final.Habilitaciones.#ctor">
            <summary>
            Constructor vacio utilizado para la serializacion.
            </summary>
        </member>
        <member name="M:Proyecto_Final.Habilitaciones.#ctor(System.String)">
            <summary>
            Inicializa la clase habilitaciones.
            </summary>
            <param name="habilitacion"></param>
        </member>
        <member name="T:Proyecto_Final.IdGenerator">
            <summary>
            Clase que ofrece el servicio de generar IDs o Tokens unicos.
            Aplicando SRP, es la unica capaz de realizar esta funcion. El resto de clases deberan solicitar el servicio. 
            </summary>
        </member>
        <member name="M:Proyecto_Final.IdGenerator.GenerateToken">
            <summary>
            Genera un token.
            </summary>
            <returns>Devuelve un token.</returns>
        </member>
        <member name="M:Proyecto_Final.IdGenerator.GenerateNumericId">
            <summary>
            Genera una ID numerica.
            </summary>
            <returns>Devuelve una ID numerica.</returns>
        </member>
        <member name="T:Proyecto_Final.Oferta">
            <summary>
            Esta clase representa las ofertas creadas por un empresario.
            Esta clase tiene como función ser una representación de una publicación de oferta, además de ser experta en modificar los atributos utilizados para representar tal oferta, por lo cual 
            </summary>
        </member>
        <member name="P:Proyecto_Final.Oferta.Id">
            <summary>
            Otorga el ID de la Oferta.
            </summary>
            <returns>Retorna el ID.</returns>
        </member>
        <member name="P:Proyecto_Final.Oferta.Nombre">
            <summary>
            Otorga el nombre de la Oferta
            </summary>
            <value>Retorna el nombre.</value>
        </member>
        <member name="P:Proyecto_Final.Oferta.Product">
            <summary>
            Otorga un objeto del Producto que se está ofertando <see cref="T:Proyecto_Final.Producto"/>.
            </summary>
            <value>Objeto del tipo "Producto".</value>
        </member>
        <member name="P:Proyecto_Final.Oferta.PalabrasClave">
            <summary>
            Otorga una lista de strings "Palabras Clave" que pueden utilizarse para buscar la oferta.
            </summary>
            <value>Retorna la lista "palabrasClave".</value>
        </member>
        <member name="P:Proyecto_Final.Oferta.HabilitacionesOferta">
            <summary>
            Otorga las habilitaciones requeridas para que un emprendedor pueda aceptar la oferta <see cref="T:Proyecto_Final.Habilitaciones"/>.
            </summary>
            <value>Objeto del tipo Habilitaciones.</value>
        </member>
        <member name="P:Proyecto_Final.Oferta.IsVendido">
            <summary>
            Otorga un valor booleano dependiendo de si la oferta fue vendida o no.
            </summary>
            <value>Retorna un valor booleano</value>
        </member>
        <member name="P:Proyecto_Final.Oferta.IsRecurrente">
            <summary>
            Otorga un valor booleano dependiendo de si la oferta es recurrente o no.
            </summary>
            <value>Verdadero si es recurrente, falso si no.</value>
        </member>
        <member name="P:Proyecto_Final.Oferta.Comprador">
            <summary>
            Otorga un valor que representa al comprador de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyecto_Final.Oferta.#ctor">
            <summary>
            Constructor vacio utilizado para la serializacion.
            </summary>
        </member>
        <member name="M:Proyecto_Final.Oferta.#ctor(System.String,Proyecto_Final.Producto,System.Boolean,Proyecto_Final.Habilitaciones)">
            <summary>
            Inicializa la clase Oferta.
            </summary>
            <param name="nombre"></param>
            <param name="product"></param>
            <param name="isRecurrente"></param>
            <param name="habilitacionesOferta"></param>
        </member>
        <member name="M:Proyecto_Final.Oferta.AgregarMsjClave(System.String)">
            <summary>
            Agrega una palabra clave a la listas de palabras clave de la oferta.
            </summary>
            <param name="palabra"></param>
        </member>
        <member name="T:Proyecto_Final.Producto">
            <summary>
            Esta clase representa al producto que se ofertará.
            Esta clase tiene como única funcion (SRP) representar un producto ofertado el cual contiene todos los atributos y un método de instancia que permiten que se realize una representación acorde a lo requerido. 
            La razón de la existencia del método es para que exista la posibilidad de que la clase se adapte a tener como moneda pesos uruguayos o dólares estadounidenses.
            </summary>
        </member>
        <member name="P:Proyecto_Final.Producto.IsPesos">
            <summary>
            Otorga una moneda en base al valor booleano de este estado
            </summary>
            <value>Dólares estadounidenses si es falso, Pesos Uruguayos si es verdadero.</value>
        </member>
        <member name="P:Proyecto_Final.Producto.Nombre">
            <summary>
            Otorga el nombre del producto.
            </summary>
            <value>Nombre del producto.</value>
        </member>
        <member name="P:Proyecto_Final.Producto.Descripcion">
            <summary>
            Otorga una descripción breve del producto.
            </summary>
            <value>Descripción del Producto.</value>
        </member>
        <member name="P:Proyecto_Final.Producto.Ubicacion">
            <summary>
            Otorga una ubicación en la que se encuentra el producto.
            </summary>
            <value>Ubicación del Producto</value>
        </member>
        <member name="P:Proyecto_Final.Producto.Valor">
            <summary>
            Otorga el valor monetario del producto.
            </summary>
            <value>Valor del producto.</value>
        </member>
        <member name="P:Proyecto_Final.Producto.Cantidad">
            <summary>
            Otorga la cantidad ofertable del producto.
            </summary>
            <value>Cantidad del producto.</value>
        </member>
        <member name="P:Proyecto_Final.Producto.Tipo">
            <summary>
            Otorga un objeto "TipoProducto" que representa el tipo de producto <see cref="T:Proyecto_Final.TipoProducto"/>.
            </summary>
            <value>Objeto del tipo "TipoProducto".</value>
        </member>
        <member name="M:Proyecto_Final.Producto.#ctor">
            <summary>
            Constructor vacio utilizado para la serializacion.
            </summary>
        </member>
        <member name="M:Proyecto_Final.Producto.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32,Proyecto_Final.TipoProducto)">
            <summary>
            Inicializa la clase Producto.
            </summary>
            <param name="nombre"></param>
            <param name="descripcion"></param>
            <param name="tipo"></param>
            <param name="ubicacion"></param>
            <param name="valor"></param>
            <param name="isPesos"></param>
            <param name="cantidad"></param>
        </member>
        <member name="M:Proyecto_Final.Producto.MonetaryValue">
            <summary>
            Método que retorna un string con el símbolo de la moneda que se utiliza para valorar un producto; en base al valor booleano de "IsPesos".
            </summary>
            <returns>Dólares Estadounidenses si es falso, Pesos Uruguayos si es verdadero.</returns>
        </member>
        <member name="T:Proyecto_Final.Rubro">
            <summary>
            Esta clase representa el rubro de una empresa.
            La única función de existencia de esta clase es para discernir entre lo que es un rubro y lo que no es un rubro, por lo cual es una clase que cumple el SRP.
            </summary>
        </member>
        <member name="P:Proyecto_Final.Rubro.Rubros">
            <summary>
            Retorna el nombre del rubro de una empresa.
            </summary>
            <value>Nombre del rubro de la empresa.</value>
        </member>
        <member name="M:Proyecto_Final.Rubro.#ctor">
            <summary>
            Constructor vacio utilizado para la serializacion.
            </summary>
        </member>
        <member name="M:Proyecto_Final.Rubro.#ctor(System.String)">
            <summary>
            Inicializa la clase rubro.
            </summary>
            <param name="rubro"></param>
        </member>
        <member name="T:Proyecto_Final.Singleton`1">
            <summary>
            Esta clase tiene como función funcionar como base para crear una sola instancia de clases almacenadoras de datos en el programa.
            La única función de esta clase es proveer la capacidad de que otras clases puedan ser singleton, por lo cual esta clase cumple con SRP.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Proyecto_Final.Singleton`1.Instance">
            <summary>
            Otorga una instancia de la clase que sea Singleton.
            </summary>
            <value><c>true</c>Crea una instancia de la clase Singleton y la retorna,<c>false</c> solo retorna la instancia de clase ya existente.</value>
        </member>
        <member name="T:Proyecto_Final.StatusManager">
            <summary>
            Esta clase es la responsable en gestionar y agregar los distintos status a cada usuario.
            Esta clase fue creada en base al patron SRP ya que sus responsabilidades son especificas y unicas.
            A su vez esta clase es una clase Singleton ya que unicamente necesitamos una instancia unica de la misma.
            </summary>
        </member>
        <member name="M:Proyecto_Final.StatusManager.ListaEstadoUsuario">
            <summary>
            Otorga un diccionario con los id de usuario como key y su estado como value.
            </summary>
            <returns>Diccionario de usuarios con sus estados.</returns>
        </member>
        <member name="M:Proyecto_Final.StatusManager.AgregarEstadoUsuario(System.String,System.String)">
            <summary>
            Modifica el estado del usuario.
            </summary>
            <param name="id"></param>
            <param name="estado"></param>
        </member>
        <member name="M:Proyecto_Final.StatusManager.PrintUserStatus">
            <summary>
            Metodo que imprime en consola una lista con los usuarios y su estado actual.
            </summary>
        </member>
        <member name="M:Proyecto_Final.StatusManager.CheckStatus(System.String)">
            <summary>
            Verifica el status actual de un usuario y lo devuelve.
            Si no tiene estado devuelve el status por defecto.
            </summary>
            <param name="id"></param>
            <returns>Devuelve el estado actual.</returns>
        </member>
        <member name="T:Proyecto_Final.Temp">
            <summary>
            Clase encargada de almacenar y actualizar los datos temporales.
            Se utilizan los patrones Expert y Singleton, ya que es necesario que exista una sola instancia de esta clase datos.
            </summary>
        </member>
        <member name="P:Proyecto_Final.Temp.TempData">
            <summary>
            Otorga el diccionario de datos temporales.
            </summary>
            <value>Retorna un diccionario con datos temporales.</value>
        </member>
        <member name="M:Proyecto_Final.Temp.AddDataById(System.String,System.String,System.String)">
            <summary>
            Agrega datos a la lista que contiene el id del usuario en el diccionario.
            </summary>
            <param name="id"></param>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Proyecto_Final.Temp.GetDataByKey(System.String,System.String)">
            <summary>
            Devuelve el dato almacenado en una key especifica.
            </summary>
            <param name="id"></param>
            <param name="key"></param>
            <returns>Devuelve un dato si lo encuentra.</returns>
        </member>
        <member name="M:Proyecto_Final.Temp.WipeDataById(System.String)">
            <summary>
            Elimina completamente el item del diccionario.
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Proyecto_Final.TipoProducto">
            <summary>
            Esta clase representa una clasificación general de un producto.
            La única función de existencia de esta clase es para discernir entre lo que es un Tipo de producto y lo que no es, por lo cual es una clase que cumple el SRP.
            </summary>
        </member>
        <member name="P:Proyecto_Final.TipoProducto.Nombre">
            <summary>
            Otorga el nombre del tipo de clasificación del producto.
            </summary>
            <value>Nombre del tipo de producto.</value>
        </member>
        <member name="M:Proyecto_Final.TipoProducto.#ctor">
            <summary>
            Constructor vacio utilizado para la serializacion.
            </summary>
        </member>
        <member name="M:Proyecto_Final.TipoProducto.#ctor(System.String)">
            <summary>
            Inicializa la clase TipoProducto.
            </summary>
            <param name="tipo"></param>
        </member>
        <member name="T:Proyecto_Final.UserAdmin">
            <summary>
            Esta clase representa a los administradores del programa.
            La única función de esta clase es proveer al sistema una manera de que nosotros como programadores/administradores podamos agregar empresas al sistema, 
            por lo cual entra dentro del patrón SRP.
            </summary>
        </member>
        <member name="P:Proyecto_Final.UserAdmin.Id">
            <summary>
            Otorga el id del administrador.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto_Final.UserAdmin.Nombre">
            <summary>
            Otorga el nombre de usuario del administrador.
            </summary>
            <value>Nombre de usuario del administrador</value>
        </member>
        <member name="M:Proyecto_Final.UserAdmin.#ctor(System.String,System.String)">
            <summary>
            Inicializa la clase UserAdmin.
            </summary>
            <param name="id"></param>
            <param name="nombre"></param>
        </member>
        <member name="M:Proyecto_Final.UserAdmin.InvitarEmpresa">
            <summary>
            Genera un token de invitacion para ser enviado y lo almacena para su verificacion.
            </summary>
            <returns>Devuelve un token generado como string</returns>
        </member>
        <member name="T:Proyecto_Final.UserCreator">
            <summary>
            Esta clase tiene como función crear a los usuarios.
            Se aplica el patron Creator y SRP ya que es la responsable en crear las instancia de los usuarios.
            </summary>
        </member>
        <member name="M:Proyecto_Final.UserCreator.AddDataById(System.String,System.String,System.String)">
            <summary>
            Agrega datos a la lista que contiene el id del usuario en el diccionario.
            </summary>
            <param name="id"></param>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Proyecto_Final.UserCreator.WipeDataById(System.String)">
            <summary>
            Elimina completamente el item del diccionario.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Proyecto_Final.UserCreator.CrearUserAdmin(System.String)">
            <summary>
            Crea una instancia de UserAdmin y la almacena.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Proyecto_Final.UserCreator.CrearUserEmpresa(System.String)">
            <summary>
            Crea una instancia de UserEmpresa y la almacena.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Proyecto_Final.UserCreator.CrearUserEmprendedor(System.String)">
            <summary>
            Crea una instancia de UserEmprendedor y la almacena.
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Proyecto_Final.UserEmprendedor">
            <summary>
            Esta clase representa a los usuarios emprendedores en el sistema.
            La función de esta clase es la de representar a un usuario que interactúa con el sistema que se identifica como emprendedor. 
            Debido a esto, la única responsabilidad de esta clase es la de proveer con un nexo entre las interacciones de usuario y los datos de este usuario, 
            los cuales se almacenan en la clase "Emprendedor" y los accede mediante el patrón de Delegación. Por lo cual, esta clase sigue con el patrón de SRP.
            </summary>
        </member>
        <member name="P:Proyecto_Final.UserEmprendedor.Id">
            <summary>
            Otorga el id del usuario.
            </summary>
            <value>Id del usuario.</value>
        </member>
        <member name="P:Proyecto_Final.UserEmprendedor.Nombre">
            <summary>
            Otorga el nombre del Emprendedor.
            </summary>
            <value>Nombre del Emprendedor.</value>
        </member>
        <member name="P:Proyecto_Final.UserEmprendedor.Emprendedor">
            <summary>
            Otorga los datos existentes en el objeto Emprendedor <see cref="P:Proyecto_Final.UserEmprendedor.Emprendedor"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyecto_Final.UserEmprendedor.#ctor">
            <summary>
            Constructor vacio utilizado para la serializacion.
            </summary>
        </member>
        <member name="M:Proyecto_Final.UserEmprendedor.#ctor(System.String,System.String)">
            <summary>
            Inicializa la clase UserEmprendedor.
            </summary>
            <param name="nombre"></param>
            <param name="id"></param>
        </member>
        <member name="M:Proyecto_Final.UserEmprendedor.AgregarHabilitacion(System.String)">
            <summary>
            Agrega una habilitacion.
            </summary>
            <param name="habilitacion"></param>
        </member>
        <member name="M:Proyecto_Final.UserEmprendedor.AgregarRubro(System.String)">
            <summary>
            Agrega un rubro.
            </summary>
            <param name="rubro"></param>
        </member>
        <member name="M:Proyecto_Final.UserEmprendedor.AgregarEspecializacion(System.String)">
            <summary>
            Agrega a la lista de especializaciones que contiene la clase "Emprendedor" una especialización.
            </summary>
        </member>
        <member name="M:Proyecto_Final.UserEmprendedor.EliminarEspecializacion(System.String)">
            <summary>
            Elimina de la lista de especializaciones que contiene la clase "Emprendedor una especialización.
            </summary>
        </member>
        <member name="M:Proyecto_Final.UserEmprendedor.ConsumoXTiempo">
            <summary>
            Como emprendedor, quiero saber cuántos materiales o residuos consumí en un período de tiempo, para de esa forma tener un control de mis insumos.
            </summary>
            <return></return>
        </member>
        <member name="M:Proyecto_Final.UserEmprendedor.VerOfertasPalabraClave(System.String)">
            <summary>
            En base a una palabra clave, busca todas las ofertas que la contengan.
            </summary>
            <return></return>
        </member>
        <member name="M:Proyecto_Final.UserEmprendedor.VerOfertasUbicacion">
            <summary>
            En base a la ubicación del Emprendedor, retorna una lista con todas las ofertas que se encuentren a una distancia de 10km o menos; utilizando el LocationApi.
            </summary>
        </member>
        <member name="M:Proyecto_Final.UserEmprendedor.VerOfertasTipo(System.String)">
            <summary>
            En base a un tipo de producto recibido, otorga todas las ofertas que tengan el mismo tipo.
            </summary>
            <param name="tipo"></param>
        </member>
        <member name="T:Proyecto_Final.UserEmpresa">
            <summary>
            Esta clase representa al usuario de la Empresa.
            La función de esta clase es la de representar a un usuario que interactúa con el sistema que se identifica como empresa. 
            Debido a esto, la única responsabilidad de esta clase es la de proveer con un nexo entre las interacciones de usuario y los datos de este usuario, 
            los cuales se almacenan en la clase "Empresa" y los accede mediante el patrón de Delegación. Por lo cual también sigue con el patrón SRP.
            </summary>
        </member>
        <member name="P:Proyecto_Final.UserEmpresa.Id">
            <summary>
            Otorga el id del usuario.
            </summary>
            <value>Id del usuario.</value>
        </member>
        <member name="P:Proyecto_Final.UserEmpresa.Nombre">
            <summary>
            Obtiene un valor del nombre del usuario empresa.
            </summary>
            <value>Nombre de la empresa</value>
        </member>
        <member name="P:Proyecto_Final.UserEmpresa.Empresa">
            <summary>
            Obtiene un valor del objeto Empresa.
            </summary>
            <value>Objeto del tipo Empresa</value>
        </member>
        <member name="P:Proyecto_Final.UserEmpresa.IsInvited">
            <summary>
            Obtiene un valor booleano dependiendo de si la empresa fue invitada o no.
            </summary>
            <value><c>true/false</c></value>
        </member>
        <member name="M:Proyecto_Final.UserEmpresa.#ctor">
            <summary>
            Constructor vacio utilizado para la serializacion.
            </summary>
        </member>
        <member name="M:Proyecto_Final.UserEmpresa.#ctor(System.String,System.String)">
            <summary>
            Inicializa la clase UserEmpresa.
            </summary>
            <param name="id"></param>
            <param name="nombre"></param>
        </member>
        <member name="M:Proyecto_Final.UserEmpresa.AgregarRubro(System.String)">
            <summary>
            Agrega un rubro.
            </summary>
            <param name="rubro"></param>
        </member>
        <member name="M:Proyecto_Final.UserEmpresa.CrearEmpresa(System.String,System.String,System.String)">
            <summary>
            El usuario puede crear la empresa.
            </summary>
            <param name="nombre"></param>
            <param name="ubicacion"></param>
            <param name="rubro"></param>
        </member>
        <member name="M:Proyecto_Final.UserEmpresa.CrearMsjClave(System.ValueTuple{System.String,System.String})">
            <summary>
            Como empresa, quiero indicar un conjunto de palabras claves asociadas a la publicación de los materiales, para que de esa forma sea más fácil de encontrarlos en las búsquedas que hacen los emprendedores.
            </summary>
            <param name="datosMensaje"></param>
        </member>
        <member name="M:Proyecto_Final.UserEmpresa.CrearOferta(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Como empresa, quiero publicar una oferta de materiales reciclables o residuos, para que de esa forma los emprendedores que lo necesiten puedan reutilizarlos.
            </summary>
            <param name="datosOferta"></param>
            <param name="datosHabilitacion"></param>
            <param name="isRecurrente"></param>
            <param name="nombreProducto"></param>
            <param name="descripcionProducto"></param>
            <param name="ubicacionProducto"></param>
            <param name="valorProducto"></param>
            <param name="valorMoneda"></param>
            <param name="cantidadProducto"></param>
            <param name="datosTipoProducto"></param>
        </member>
        <member name="M:Proyecto_Final.UserEmpresa.CrearProducto(System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.String)">
            <summary>
            Como empresa, quiero clasificar los materiales o residuos, indicar su cantidad y unidad, el valor (en $ o U$S) de los mismos y el lugar donde se ubican, para que de esa forma los emprendedores tengan información de materiales o residuos disponibles.
            </summary>
            <param name="nombre"></param>
            <param name="descripcion"></param>
            <param name="ubicacion"></param>
            <param name="valor"></param>
            <param name="isPesos"></param>
            <param name="cantidad"></param>
            <param name="datosTipoProducto"></param>
            <returns></returns>
        </member>
        <member name="M:Proyecto_Final.UserEmpresa.ConcretarOferta(System.String,System.String,System.String)">
            <summary>
            Cambia el estado de la oferta especifica a vendido.
            </summary>
            <param name="input"></param>
            <param name="nombreOferta"></param>
            <param name="nombreEmprendedor"></param>
        </member>
        <member name="M:Proyecto_Final.UserEmpresa.VerificarVentas">
            <summary>
            Como empresa, quiero saber todos los materiales o residuos entregados en un período de tiempo, para de esa forma tener un seguimiento de su reutilización.
            </summary>
            <returns>Retorna un diccionario con los datos de las ventas</returns>
        </member>
        <member name="T:Proyecto_Final.AddKeyWordHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Palabra".
            </summary>
        </member>
        <member name="F:Proyecto_Final.AddKeyWordHandler.Oferta">
            <summary>
            El nombre de la oferta que el usuario luego ingresará.
            </summary>
        </member>
        <member name="F:Proyecto_Final.AddKeyWordHandler.KeyWord">
            <summary>
            La palabra clave que el usuario luego ingresará.
            </summary>
        </member>
        <member name="M:Proyecto_Final.AddKeyWordHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.AddKeyWordHandler"/>. Esta clase procesa el mensaje "Palabra".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.AddKeyWordHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "Palabra" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:Proyecto_Final.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:Proyecto_Final.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:Proyecto_Final.BaseHandler.#ctor(Proyecto_Final.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.BaseHandler.#ctor(System.String[],Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.BaseHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="responder">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:Proyecto_Final.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Proyecto_Final.BaseHandler.CanHandle(Proyecto_Final.IMessage)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:Proyecto_Final.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Proyecto_Final.BaseHandler.Handle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Proyecto_Final.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:Proyecto_Final.CategoryHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "category".
            </summary>
        </member>
        <member name="M:Proyecto_Final.CategoryHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.CategoryHandler"/>. Esta clase procesa el mensaje "keyword".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.CategoryHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "category" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.ExitHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "salir".
            </summary>
        </member>
        <member name="M:Proyecto_Final.ExitHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.ExitHandler"/>. Esta clase procesa el mensaje "salir".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.ExitHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "salir" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.GoodByeHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Proyecto_Final.GoodByeHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.GoodByeHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.HelloHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Proyecto_Final.HelloHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.HelloHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.HelloHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.InviteHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "invitar".
            </summary>
        </member>
        <member name="P:Proyecto_Final.InviteHandler.AllowedStatus">
            <summary>
            Otorga un array con los status validos.
            </summary>
            <value>Array de status</value>
        </member>
        <member name="M:Proyecto_Final.InviteHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.InviteHandler"/>. Esta clase procesa el mensaje "invitar".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.InviteHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "invitar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.KeyWordsHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "keyword".
            </summary>
        </member>
        <member name="M:Proyecto_Final.KeyWordsHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.KeyWordsHandler"/>. Esta clase procesa el mensaje "keyword".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.KeyWordsHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "keyword" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.MaterialsConsumedHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "materialsConsumed".
            </summary>
        </member>
        <member name="P:Proyecto_Final.MaterialsConsumedHandler.AllowedStatus">
            <summary>
            Otorga un array con los status validos.
            </summary>
            <value>Array de status</value>
        </member>
        <member name="M:Proyecto_Final.MaterialsConsumedHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.KeyWordsHandler"/>. Esta clase procesa el mensaje "materialsConsumend".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.MaterialsConsumedHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "materialsConsumend" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.PeriodOfTimeHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "PeriodOfTime".
            </summary>
        </member>
        <member name="M:Proyecto_Final.PeriodOfTimeHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.CategoryHandler"/>. Esta clase procesa el mensaje "PeriodOfTime".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.PeriodOfTimeHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "PeriodOfTime" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.PhotoHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "foto".
            </summary>
        </member>
        <member name="M:Proyecto_Final.PhotoHandler.#ctor(Telegram.Bot.TelegramBotClient,Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.PhotoHandler"/>. Esta clase procesa el mensaje "foto".
            </summary>
            <param name="next">El próximo "handler".</param>
            <param name="bot">El bot para enviar la foto.</param>
        </member>
        <member name="M:Proyecto_Final.PhotoHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "foto" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:Proyecto_Final.PhotoHandler.SendProfileImage(Proyecto_Final.IMessage)">
            <summary>
            Envía una imagen como respuesta al mensaje recibido. Como ejemplo enviamos siempre la misma foto.
            </summary>
        </member>
        <member name="T:Proyecto_Final.PublishHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Publicar".
            </summary>
        </member>
        <member name="P:Proyecto_Final.PublishHandler.AllowedStatus">
            <summary>
            Otorga un array con los status validos.
            </summary>
            <value>Array de status</value>
        </member>
        <member name="M:Proyecto_Final.PublishHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.PublishHandler"/>. Esta clase procesa el mensaje "Publicar".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.PublishHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "Publicar" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.RegisterHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "registro".
            </summary>
        </member>
        <member name="P:Proyecto_Final.RegisterHandler.AllowedStatus">
            <summary>
            Otorga un array con los status validos.
            </summary>
            <value>Array de status</value>
        </member>
        <member name="M:Proyecto_Final.RegisterHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.RegisterHandler"/>. Esta clase procesa el mensaje "registro".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.RegisterHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "registro" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.StartHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "start".
            </summary>
        </member>
        <member name="M:Proyecto_Final.StartHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.StartHandler"/>. Esta clase procesa el mensaje "start".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.StartHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "start" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.ZoneHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "zone".
            </summary>
        </member>
        <member name="M:Proyecto_Final.ZoneHandler.#ctor(Proyecto_Final.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Proyecto_Final.KeyWordsHandler"/>. Esta clase procesa el mensaje "zone".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Proyecto_Final.ZoneHandler.InternalHandle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "zone" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Proyecto_Final.IHandler">
            <summary>
            Interfaz para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta interfaz define un atributo para definir el próximo "handler" y una una operación para
            recibir el mensaje y pasarlo al siguiente "handler" en caso que el mensaje no sea procesado. La responsabilidad de
            decidir si el mensaje se procesa o no, y de procesarlo, se realiza en las clases que implementan esta interfaz.
            </summary>
            <remarks>
            La interfaz se crea en función del principio de inversión de dependencias, para que los clientes de la cadena de
            responsabilidad, que pueden ser concretos, no dependan de una clase "handler" que potencialmente es abstracta.
            </remarks>
        </member>
        <member name="P:Proyecto_Final.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Proyecto_Final.IHandler.Handle(Proyecto_Final.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Proyecto_Final.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Proyecto_Final.IJsonConvertible">
            <summary>
            Define el tipo que tienen los objetos que pueder ser serializados en y deserializados desde texto en formato
            Json.
            </summary>
        </member>
        <member name="M:Proyecto_Final.IJsonConvertible.ConvertToJson">
            <summary>
            Convirte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando <see cref="M:Proyecto_Final.IJsonConvertible.LoadFromJson(System.String)"/>.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="M:Proyecto_Final.IJsonConvertible.LoadFromJson(System.String)">
            <summary>
            Asigna las propiedades del objeto a partir de texto en formato Json. El texto en formato Json puede ser
            obtenido utilizando <see cref="M:Proyecto_Final.IJsonConvertible.ConvertToJson"/>.
            </summary>
            <param name="json">El texto en formato Json a partir del cual asignas las propiedades del objeto.</param>
        </member>
        <member name="T:Proyecto_Final.IMessage">
            <summary>
            La función de esta clase es la de independizar la codificación del ChatBot de la API que se utiliza, aunque es necesario que exista una API para hacer funcionar este programa.
            Esta clase tiene una sola responsabilidad, que es la de obtener datos de una API y polimorfizarlos en datos de una interfaz, 
            en pos de separar la API del código, por lo cual es un SRP de Polimorfismo.
            </summary>
        </member>
        <member name="P:Proyecto_Final.IMessage.UserId">
            <summary>
            El ID del usuario que envía un mensaje
            </summary>
            <value>String del usuario</value>
        </member>
        <member name="P:Proyecto_Final.IMessage.ChatId">
            <summary>
            El ID del chat en el que se envía el mensaje
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto_Final.IMessage.Text">
            <summary>
            El mensaje en sí.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto_Final.IMessage.FirstName">
            <summary>
            El Nombre de la persona según los datos registrados en la API.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto_Final.IMessage.LastName">
            <summary>
            El Apellido de la persona según los datos registrados en la API.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto_Final.IMessage.Date">
            <summary>
            La fecha en la que se realizó el mensaje.
            </summary>
            <value></value>
        </member>
        <member name="T:Proyecto_Final.IUser">
            <summary>
            Esta interfaz se utiliza para agrupar todas las clases usuario dentro de un solo tipo, el cual tiene como atributo el ID, aquello que hace cada objeto único dentro de los datos que tenemos.
            La función de esta clase es permitir polimorfizar las clases y guardarlas todas dentro de una lista, 
            la de los usuarios almacenados, y es la única razón por la que funcióna el método "GetUserByID" de Datos. <see cref="M:Proyecto_Final.Datos.GetUserById(System.String)"/>
            </summary>
        </member>
        <member name="P:Proyecto_Final.IUser.Id">
            <summary>
            String con el Id de un usuario registrado.
            </summary>
            <value>Devuelve el ID con el que se registro.</value>
        </member>
        <member name="T:Ucu.Poo.Locations.Client.Distance">
            <summary>
            Representa la distancia entre las coordenas o las direcciones de origen y destino retornada en los métodos
            <see cref="M:Ucu.Poo.Locations.Client.LocationApiClient.GetDistanceAsync(Ucu.Poo.Locations.Client.Location,Ucu.Poo.Locations.Client.Location)"/> o
            <see cref="M:Ucu.Poo.Locations.Client.LocationApiClient.GetDistanceAsync(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Distance.Found">
            <summary>
            Indica si se encontraron o no las coordenas o las direcciones de origen y destino.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Distance.TravelDistance">
            <summary>
            La distancia entre las coordenadas o las direcciones de origen y destino.
            </summary>
            <value>La distancia en metros.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Distance.TravelDuration">
            <summary>
            El tiempo que se demora en llegar de las coordenadas o de las direcciones de origen a las de destino.
            </summary>
            <value>El tiempo que se demora en minutos.</value>
        </member>
        <member name="T:Ucu.Poo.Locations.Client.Location">
            <summary>
            Representa las coordenadas y otros datos de la ubicación de una dirección retornada en el método
            <see cref="M:Ucu.Poo.Locations.Client.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.Found">
            <summary>
            Indica si se encontró o no la dirección. En ese caso son válidos los demás valores. En caso contrario los
            demás valores son indeterminados.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.AddresLine">
            <summary>
            La dirección: calle y número, ruta y kilómetro, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.CountryRegion">
            <summary>
            El país.
            </summary>
            <value>Por ejemplo, Uruguay</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.FormattedAddress">
            <summary>
            La dirección completa, incluyendo ciudad, código postal, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738, Montevideo, 11200, Uruguay.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.Locality">
            <summary>
            La localidad o ciudad.
            </summary>
            <value>Por ejemplo, Montevideo</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.PostalCode">
            <summary>
            El código postal.
            </summary>
            <value>Por ejemplo, 11200</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.Latitude">
            <summary>
            La latitud de la dirección.
            </summary>
            <value>El valor de la latitud en formato decimal.</value>
        </member>
        <member name="P:Ucu.Poo.Locations.Client.Location.Longitude">
            <summary>
            La longitud de la dirección.
            </summary>
            <value>El valor de la longitud en formato decimal.</value>
        </member>
        <member name="T:Ucu.Poo.Locations.Client.LocationApiClient">
            <summary>
            Clase encargada de conseguir la localizacion y distancia.
            </summary>
        </member>
        <member name="M:Ucu.Poo.Locations.Client.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Obtiene las coordenadas de una dirección.
            </summary>
            <param name="address">La dirección.</param>
            <param name="city">La ciudad. Es opcional. El valor predeterminado es Montevideo.</param>
            <param name="department">El departamento, estado, provincia, etc. Es opcional. El valor predeterminado es `ontevideo.</param>
            <param name="country">El país. Es opcional. El valor predeterminado es Uruguay.</param>
            <returns>Las coordenadas de la dirección.</returns>
        </member>
        <member name="M:Ucu.Poo.Locations.Client.LocationApiClient.GetDistanceAsync(Ucu.Poo.Locations.Client.Location,Ucu.Poo.Locations.Client.Location)">
            <summary>
            Obtiene la distancia entre dos coordenadas.
            </summary>
            <param name="from">La coordenada de origen.</param>
            <param name="to">La coordenada de destino.</param>
            <returns>La distancia entre las dos coordenadas.</returns>
        </member>
        <member name="M:Ucu.Poo.Locations.Client.LocationApiClient.GetDistanceAsync(System.String,System.String)">
            <summary>
            Obtiene la distancia entre dos direcciones.
            </summary>
            <param name="from">La dirección de origen.</param>
            <param name="to">La dirección de destino.</param>
            <returns>La distancia entre las dos direcciones.</returns>
        </member>
        <member name="M:Ucu.Poo.Locations.Client.LocationApiClient.DownloadMapAsync(System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Descarga una mapa de una coordenada.
            </summary>
            <param name="latitude">La latitud de la coordenada.</param>
            <param name="longitude">La longitud de la coordenada.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. El formato es PNG.</param>
            <param name="zoomLevel">El nivel de zoom del mapa entre 1 y 20. Es opcional. El valor predeterminado es
            15.</param>
        </member>
        <member name="M:Ucu.Poo.Locations.Client.LocationApiClient.DownloadRouteAsync(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Un mapa con una ruta entre dos coordenadas.
            </summary>
            <param name="fromLatitude">La latitud de la coordenada de origen.</param>
            <param name="fromLongitude">La longitu de la coordenada de origen.</param>
            <param name="toLatitude">La latitud de la coordenada de destino.</param>
            <param name="toLongitude">La longitud de la coordenada de destino.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. Es formato es PNG.</param>
        </member>
    </members>
</doc>
